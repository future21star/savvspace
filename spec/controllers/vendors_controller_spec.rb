require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe VendorsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Vendor. As you add validations to Vendor, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Test Vendor" }
  }

  let(:invalid_attributes) {
    { name: "" }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VendorsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:admin_user) do
    user = FactoryGirl.create(:user, :admin)
  end

  describe "GET #index" do
    it "assigns all vendors as @vendors" do
      vendor = Vendor.create! valid_attributes
      get :index
      expect(assigns(:vendors)).to eq([vendor])
    end
  end

  describe "GET #show" do
    it "assigns the requested vendor as @vendor" do
      vendor = Vendor.create! valid_attributes
      get :show, {id: vendor.to_param}
      expect(assigns(:vendor)).to eq(vendor)
    end
  end

  describe "GET #new" do
    before { sign_in admin_user }

    it "assigns a new vendor as @vendor" do
      get :new
      expect(assigns(:vendor)).to be_a_new(Vendor)
    end
  end

  describe "GET #edit" do
    before { sign_in admin_user }

    it "assigns the requested vendor as @vendor" do
      vendor = Vendor.create! valid_attributes
      get :edit, {id: vendor.to_param}
      expect(assigns(:vendor)).to eq(vendor)
    end
  end

  describe "POST #create" do
    before { sign_in admin_user }

    context "with valid params" do
      it "creates a new Vendor" do
        expect {
          post :create, {vendor: valid_attributes}
        }.to change(Vendor, :count).by(1)
      end

      it "assigns a newly created vendor as @vendor" do
        post :create, {vendor: valid_attributes}
        expect(assigns(:vendor)).to be_a(Vendor)
        expect(assigns(:vendor)).to be_persisted
      end

      it "redirects to the created vendor's profile page" do
        post :create, {vendor: valid_attributes}
        expect(response).to redirect_to(edit_vendor_profile_path(assigns(:vendor)))
      end

      it "associates the logged in user as the owner of the Vendor" do
        post :create, {vendor: valid_attributes}
        expect(admin_user.role?("owner", assigns(:vendor))).to be true
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved vendor as @vendor" do
        post :create, {vendor: invalid_attributes}
        expect(assigns(:vendor)).to be_a_new(Vendor)
      end

      it "re-renders the 'new' template" do
        post :create, {vendor: invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before { sign_in admin_user }

    context "with valid params" do
      let(:new_attributes) {
        { name: "Test Vendor 2" }
      }

      it "updates the requested vendor" do
        vendor = Vendor.create! valid_attributes
        put :update, {id: vendor.to_param, vendor: new_attributes}
        vendor.reload
        expect(vendor.name).to eq(new_attributes[:name])
      end

      it "assigns the requested vendor as @vendor" do
        vendor = Vendor.create! valid_attributes
        put :update, {id: vendor.to_param, vendor: valid_attributes}
        expect(assigns(:vendor)).to eq(vendor)
      end

      it "redirects to the vendor" do
        vendor = Vendor.create! valid_attributes
        put :update, {id: vendor.to_param, vendor: valid_attributes}
        expect(response).to redirect_to(vendor)
      end
    end

    context "with invalid params" do
      it "assigns the vendor as @vendor" do
        vendor = Vendor.create! valid_attributes
        put :update, {id: vendor.to_param, vendor: invalid_attributes}
        expect(assigns(:vendor)).to eq(vendor)
      end

      it "re-renders the 'edit' template" do
        vendor = Vendor.create! valid_attributes
        put :update, {id: vendor.to_param, vendor: invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before { sign_in admin_user }

    it "destroys the requested vendor" do
      vendor = Vendor.create! valid_attributes
      expect {
        delete :destroy, {id: vendor.to_param}
      }.to change(Vendor, :count).by(-1)
    end

    it "redirects to the vendors list" do
      vendor = Vendor.create! valid_attributes
      delete :destroy, {id: vendor.to_param}
      expect(response).to redirect_to(vendors_url)
    end
  end

end
